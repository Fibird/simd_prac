/* $begin mountainmain */
#include <stdlib.h>
#include <stdio.h>
#include <sys/time.h>           /* gettimeofday */
#include <immintrin.h>
#include "x86intrin.h"
#include <pthread.h>
#include <unistd.h>

#include "Rdtsc.h"              /* startTimer, stopTimer */

#define L1 (1 << 15)    /* Working set size for L1 cache 32KB */
#define L2 (1 << 18)    /* Working set size for L2 cache 256KB */
#define L3 ((1 << 20) * 5 / 2)    /* Working set size for L3 cache 2.5MB */
#define LLC ((1 << 20) * 55)    /* Working set size for LLC cache 55MB */
#define MAXELEMS 6000
#define random(x) (rand()%(x))

void init_pk(int *pk, int pk_len);
void init_fk(int *fk, int fk_len, int pk_len);

int test(int *pk, int pk_len, int *fk, int fk_len);
int test_SIMD(int *pk, int pk_len, int *fk, int fk_len);
int test_SIMD_partition(int *pk, int pk_len, int *fk, int fk_len);
long run(int *data, int *vector, int n,int vec_len);

const int cache_len = 4;
const char *cache_names[4] = { "L1", "L2", "L3", "LLC" };
int cache_sizes[4] = { L1, L2, L3, LLC };

/* $begin mountainmain */
int main()
{
	int * fk= (int *) malloc(sizeof(int) * MAXELEMS);      /* foreign key column*/
	int f;
    	for (step = 10; step <= 100; step+=10) {
			printf("\t%d", step);
		}
		printf("\n");
		for (c = 0; c < cache_len; ++c) {
			printf("%s", cache_names[c]);
			for (step = 10; step <= 100; step += 10) {
				int i, pk_len = cache_sizes[c] / sizeof(int) * step / 100;
				int * pk = (int *) malloc(sizeof(int) * pk_len);
				init_pk(pk, pk_len); /* Initialize primary key vector elements in vector */
				init_fk(fk, MAXELEMS, pk_len); /* Initialize foreign key elements in data */
	                        printf("%ld\t", run(fk,pk,MAXELEMS,pk_len));
				free(pk);
			}
			printf("\n");
		}
	free(fk);
    exit(0);
}

// initializes primary key array
void init_pk(int *pk, int pk_len) {
	int i, j, tmp;
	for (i = 0; i < pk_len; ++i) {
		pk[i] = -i;
	}
	for (i = pk_len - 1; i > 0; --i) {
		j = random(i + 1);
		tmp = pk[j];
		pk[j] = pk[i];
		pk[i] = tmp;
	}
}

// initializes foreign key array
void init_fk(int *fk, int fk_len, int pk_len) {
	int i;
	for (i = 0; i < fk_len; ++i) {
		fk[i] = - random(pk_len);
	}
}

int test(int *pk, int pk_len, int *fk, int fk_len) /* The test function */
{
	volatile int sink=0; 
    int i, j;
    int result = 0; 
    for (i = 0; i < fk_len; ++i) {
        for (j = 0; j < pk_len; ++j) {
            if (fk[i] == pk[j]) {
                ++result;
            }
        }
    }
    sink = result; /* So compiler doesn't optimize away the loop */
	// printf("[%d]",sink);
	return sink;
}

int test_SIMD(int *pk, int pk_len, int *fk, int fk_len) {
	__m256i yidOuter;
	__m256i yidInner;
	__m256i yidResult = _mm256_set1_epi32(0);
	__m256i yidTmp;

	volatile int sink = 0;
	int i, j;
	int ret = 0;
	int q[8];
	int bound = pk_len / 8 * 8;
	void *p;
	for (i = 0; i < fk_len; ++i) {
		yidOuter = _mm256_set1_epi32(fk[i]);
		p = pk;
		for (j = 0; j < bound; j+= 8) {
			yidInner = _mm256_loadu_si256(p);
			yidTmp = _mm256_cmpeq_epi32(yidOuter, yidInner);
			yidResult = _mm256_sub_epi32(yidResult, yidTmp);
			p += 32;
		}
		for (; j < pk_len; ++j) {
			if (fk[i] == pk[j]) {
                ++ret;
            }
		}
	}
	_mm256_storeu_si256((void *)q, yidResult);
	ret += q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7];
	sink = ret;
	// printf("[%d]", sink);
	return sink;
}

typedef struct {
    int *pk;
    int pk_len;
    int *fk;
    int fk_len;
    int result;
} Args;

int SPNLJ(int *pk, int pk_len, int *fk, int fk_len, int tnum) {
    int part_size = (pk_len + 1) / tnum ;
    int remain_size = pk_len % tnum;
    int i = 0; 
    pthread_t tid[tnum];
    Args args[tnum];
    for (i = 0; i < tnum; i++) {
        args[i].pk = i * part_size + pk;
        args[i].pk_len = part_size;
        args[i].fk = fk;  args[i].fk_len = fk_len;
        args[i].result = 0;
        if (i == (tnum - 1) && remain_size != 0) args->pk_len = remain_size;
        pthread_create(&tid[i], NULL, test_SIMD_partition, (void*)&args[i]);
    }

    int result = 0;
    for (i = 0; i < tnum; i++) {
        pthread_join(tid[i], NULL);
        result += args[i].result; 
    }
}


void test_SIMD_partition(void *args) {
        int *pk = (Args*)args->pk;
        int pk_len = (Args*)args->pk_len;
        int *fk = (Args*)args->fk
        int fk_len = (Args*)args->fk_len;
        int result = (Args*)args->result;

	__m256i yidOuter;
	__m256i yidInner;
	__m256i yidResult = _mm256_set1_epi32(0);
	__m256i yidTmp;

	volatile int sink = 0;
	int i, j, k;
	int ret = 0;
	int q[8];
	int partition = L1/ 2 / 4;
	void *p;
	for (k = 0; k < pk_len; k += partition) {
		int end = k + partition < pk_len ? k + partition : pk_len;
		int bound = (end - k) / 8 * 8 + k;
		for (i = 0; i < fk_len; ++i) {
			yidOuter = _mm256_set1_epi32(fk[i]);
			p = pk + k;
			for (j = k; j < bound; j+= 8) {
				yidInner = _mm256_loadu_si256(p);
				yidTmp = _mm256_cmpeq_epi32(yidOuter, yidInner);
				yidResult = _mm256_sub_epi32(yidResult, yidTmp);
				p += 32;
			}
			for (; j < end; ++j) {
				if (fk[i] == pk[j]) {
					++ret;
				}
			}
		}
	}
	_mm256_storeu_si256((void *)q, yidResult);
	ret += q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7];
	sink = ret;
        args->result = sink;
	// printf("[%d]", sink);
	//return sink;
}

long run(int *data, int *vector, int n, int vec_len)
{   
    long cycles;
    uint64_t timer;
    test(data, vector,n,vec_len);                     /* warm up the cache */       //line:mem:warmup
    startTimer(&timer);
    test(data, vector,n,vec_len);                     /* test for cache locality */    
    stopTimer(&timer); 
    cycles = timer;  
    return cycles; 
}
/* $end mountainfuns */
